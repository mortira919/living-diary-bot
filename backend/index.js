require('dotenv').config();

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
const admin = require('firebase-admin');
const axios = require('axios');

const serviceAccount = require('./firebase-service-account.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const token = process.env.TELEGRAM_BOT_TOKEN;
const port = process.env.PORT || 3001;
const fastApiBaseUrl = process.env.FASTAPI_BASE_URL;
const internalSecretKey = process.env.INTERNAL_SECRET_KEY;

const prisma = new PrismaClient();
const bot = new TelegramBot(token, { polling: true });

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

bot.on('message', async (msg) => {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.startsWith('/')) {
    const command = text.split(' ')[0];

    switch (command) {
      case '/start':
        const welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, /notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫–∞.";
        bot.sendMessage(chatId, welcomeText);
        break;

      case '/connect':
        const userExists = await prisma.user.findUnique({ where: { telegramChatId: String(chatId) } });
        if (userExists) {
          bot.sendMessage(chatId, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω!");
        } else {
          const frontendUrl = process.env.FRONTEND_LINKING_URL || 'https://living-diary-bot.vercel.app';
          const linkText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º.";
          const options = {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîó –í–æ–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', web_app: { url: `${frontendUrl}/?chatId=${chatId}` } }]
              ]
            }
          };
          bot.sendMessage(chatId, linkText, options);
        }
        break;
      
      case '/notes':
        handleGetNotes(chatId);
        break;

      case '/delete':
        handleDeleteNote(chatId);
        break;
        
      default:
        bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
        break;
    }
  } else {
    handleSaveNote(chatId, text);
  }
});

async function getFirebaseUid(chatId) {
  const user = await prisma.user.findUnique({
    where: { telegramChatId: String(chatId) }
  });

  if (!user) {
    bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect.");
    return null;
  }
  return user.firebaseUid;
}

async function handleSaveNote(chatId, text) {
  const firebaseUid = await getFirebaseUid(chatId);
  if (!firebaseUid) return;

  try {
    await axios.post(
      `${fastApiBaseUrl}/notes/bot/`, // <--- –ò–ó–ú–ï–ù–ï–ù–û
      {
        text: text,
        userId: firebaseUid
      },
      {
        headers: {
          'X-Internal-Secret': internalSecretKey
        }
      }
    );
    bot.sendMessage(chatId, `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ FastAPI:', error.response ? error.response.data : error.message);
    bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }
}

async function handleGetNotes(chatId) {
  const firebaseUid = await getFirebaseUid(chatId);
  if (!firebaseUid) return;

  try {
    const response = await axios.get(
      `${fastApiBaseUrl}/notes/bot/`, // <--- –ò–ó–ú–ï–ù–ï–ù–û
      {
        params: { userId: firebaseUid },
        headers: { 'X-Internal-Secret': internalSecretKey }
      }
    );
    const notes = response.data;

    if (!notes || notes.length === 0) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.");
    }
    const responseText = notes.map((note, index) => `${index + 1}. ${note.text}`).join('\n');
    bot.sendMessage(chatId, `–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n${responseText}`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ FastAPI –¥–ª—è /notes:', error.response ? error.response.data : error.message);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –¥–Ω–µ–≤–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handleDeleteNote(chatId) {
    const firebaseUid = await getFirebaseUid(chatId);
    if (!firebaseUid) return;

    try {
        const response = await axios.get(`${fastApiBaseUrl}/notes/bot/`, { // <--- –ò–ó–ú–ï–ù–ï–ù–û
            params: { userId: firebaseUid, limit: 5 },
            headers: { 'X-Internal-Secret': internalSecretKey }
        });
        const notes = response.data;

        if (notes.length === 0) {
            return bot.sendMessage(chatId, "–í–∞–º –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.");
        }
        const keyboard = notes.map(note => ([
            { text: `‚ùå ${note.text.substring(0, 30)}...`, callback_data: `delete_${note.id}` }
        ]));

        bot.sendMessage(chatId, '–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', {
            reply_markup: { inline_keyboard: keyboard }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error.response ? error.response.data : error.message);
        bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }
}

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = msg.chat.id;

  if (data.startsWith('delete_')) {
    const firebaseUid = await getFirebaseUid(chatId);
    if (!firebaseUid) return;

    const noteIdToDelete = data.split('_')[1];
    
    try {
      await axios.delete(
        `${fastApiBaseUrl}/notes/bot/${noteIdToDelete}`, // <--- –ò–ó–ú–ï–ù–ï–ù–û
        {
          headers: { 'X-Internal-Secret': internalSecretKey },
          params: { userId: firebaseUid }
        }
      );
      
      bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!' });
      bot.editMessageText('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
        reply_markup: { inline_keyboard: [] }
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ FastAPI:", error.response ? error.response.data : error.message);
      bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!' });
    }
  }
});

const app = express();
app.use(cors());
app.use(express.json());

const checkAuth = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
  }
  const idToken = authHeader.split('Bearer ')[1];
  try {
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    req.user = decodedToken;
    next();
  } catch (error) {
    return res.status(403).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.');
  }
};

app.post('/api/link-account', checkAuth, async (req, res) => {
  try {
    const firebaseUid = req.user.uid;
    const { chatId } = req.body;
    if (!chatId) return res.status(400).json({ error: 'chatId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });

    await prisma.user.upsert({
      where: { firebaseUid: firebaseUid },
      update: { telegramChatId: String(chatId) },
      create: { firebaseUid: firebaseUid, telegramChatId: String(chatId) }
    });

    bot.sendMessage(chatId, 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.');
    
    res.status(200).json({ message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!' });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});