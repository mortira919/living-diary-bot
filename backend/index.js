require('dotenv').config();

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
const admin = require('firebase-admin');
const axios = require('axios');

const serviceAccount = require('./firebase-service-account.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const token = process.env.TELEGRAM_BOT_TOKEN;
const port = process.env.PORT || 3001;

const prisma = new PrismaClient();
const bot = new TelegramBot(token, { polling: true });

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");

bot.on('message', async (msg) => {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text === '/start') {
    const welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, /notes –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, /delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –∑–∞–º–µ—Ç–∫–∞.";
    bot.sendMessage(chatId, welcomeText);
  
  } else if (text === '/connect') {
    const user = await prisma.user.findUnique({ where: { telegramChatId: String(chatId) } });

    if (user) {
      bot.sendMessage(chatId, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω!");
    } else {
      const frontendUrl = 'https://living-diary-bot.vercel.app';
      const linkText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º.";
      const options = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîó –í–æ–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', web_app: { url: `${frontendUrl}/?chatId=${chatId}` } }]
          ]
        }
      };
      bot.sendMessage(chatId, linkText, options);
    }
  } else {
    const user = await prisma.user.findUnique({
      where: { telegramChatId: String(chatId) }
    });

    if (!user) {
      return bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect.");
    }

    const userId = user.firebaseUid;

    if (text === '/notes')  {
  try {
    const response = await axios.get(
      `${process.env.FASTAPI_BASE_URL}/api/notes`,
      {
        headers: {
          'X-Internal-Secret': process.env.INTERNAL_SECRET_KEY
        },
        params: {
          userId: userId 
        }
      }
    );
    const notes = response.data;

    if (!notes || notes.length === 0) {
      return bot.sendMessage(chatId, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ.");
    }
    const responseText = notes.map((note, index) => `${index + 1}. ${note.text}`).join('\n');
    bot.sendMessage(chatId, `–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:\n${responseText}`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ FastAPI –¥–ª—è /notes:', error.response ? error.response.data : error.message);
    bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –¥–Ω–µ–≤–Ω–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} else if (text === '/delete') {
  const notes = await prisma.note.findMany({ where: { userId: userId }, orderBy: { createdAt: 'desc' }, take: 5 });
  if (notes.length === 0) return bot.sendMessage(chatId, "–í–∞–º –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.");
  const keyboard = notes.map(note => ([{ text: `‚ùå ${note.text.substring(0, 30)}...`, callback_data: `delete_${note.id}` }]));
  bot.sendMessage(chatId, '–ö–∞–∫—É—é –∑–∞–º–µ—Ç–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?', { reply_markup: { inline_keyboard: keyboard } });

    } else { 
      try {
        await prisma.note.create({ data: { text: text, userId: userId } });
        bot.sendMessage(chatId, `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±–æ—Ç–æ–º:', error);
        bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`);
      }
    }
  }
});

bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  if (data.startsWith('delete_')) {
    const noteIdToDelete = parseInt(data.split('_')[1], 10);
    try {
      await prisma.note.delete({ where: { id: noteIdToDelete } });
      bot.answerCallbackQuery(callbackQuery.id, { text: '–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!' });
      bot.editMessageText('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.', { chat_id: msg.chat.id, message_id: msg.message_id, reply_markup: { inline_keyboard: [] } });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ –±–æ—Ç–æ–º:", error);
      bot.answerCallbackQuery(callbackQuery.id, { text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏!' });
    }
  }
});

const app = express();
app.use(cors());
app.use(express.json());

const checkAuth = async (req, res, next) => {
  if (!req.headers.authorization || !req.headers.authorization.startsWith('Bearer ')) {
    return res.status(401).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
  }
  const idToken = req.headers.authorization.split('Bearer ')[1];
  try {
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    req.user = decodedToken;
    next();
  } catch (error) {
    return res.status(403).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.');
  }
};

app.get('/api/notes', checkAuth, async (req, res) => {
  try {
    const userId = req.user.uid;
    const notes = await prisma.note.findMany({ where: { userId: userId }, orderBy: { createdAt: 'desc' } });
    res.json(notes);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/notes', checkAuth, async (req, res) => {
  try {
    const userId = req.user.uid;
    const { text } = req.body;
    if (!text) return res.status(400).json({ error: '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.' });
    const newNote = await prisma.note.create({ data: { text: text, userId: userId } });
    res.status(201).json(newNote);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/api/notes/:id', checkAuth, async (req, res) => {
  try {
    const userId = req.user.uid;
    const noteId = parseInt(req.params.id, 10);
    const note = await prisma.note.findUnique({ where: { id: noteId } });
    if (!note || note.userId !== userId) return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.' });
    await prisma.note.delete({ where: { id: noteId } });
    res.status(204).send();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/api/link-account', checkAuth, async (req, res) => {
  try {
    const firebaseUid = req.user.uid;
    const { chatId } = req.body;
    if (!chatId) return res.status(400).json({ error: 'chatId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });
    await prisma.user.upsert({
      where: { firebaseUid: firebaseUid },
      update: { telegramChatId: String(chatId) },
      create: { firebaseUid: firebaseUid, telegramChatId: String(chatId) }
    });
    res.status(200).json({ message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!' });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(process.env.PORT || 3001, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3001}`);
});