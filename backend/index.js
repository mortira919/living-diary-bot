require('dotenv').config();

const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
const admin = require('firebase-admin');
const axios = require('axios');

const serviceAccount = require('./firebase-service-account.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const token = process.env.TELEGRAM_BOT_TOKEN;
const port = process.env.PORT || 3001;
const fastApiBaseUrl = process.env.FASTAPI_BASE_URL;
const internalSecretKey = process.env.INTERNAL_SECRET_KEY;
const miniAppUrl = process.env.MINI_APP_URL;

const prisma = new PrismaClient();
const bot = new TelegramBot(token, { polling: true });

async function setupBotCommands() {
  await bot.setMyCommands([
    { command: '/start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: '/connect', description: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' },
    { command: '/notes', description: '–û—Ç–∫—Ä—ã—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ (—á–µ—Ä–µ–∑ –º–µ–Ω—é)' },
  ]);

  if (miniAppUrl) {
    await bot.setChatMenuButton({
      menuButton: {
        type: 'web_app',
        text: '–î–Ω–µ–≤–Ω–∏–∫',
        web_app: { url: miniAppUrl }
      }
    });
    console.log("–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è Mini App —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
  } else {
    console.warn("–í–Ω–∏–º–∞–Ω–∏–µ: MINI_APP_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.");
  }
}

console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
setupBotCommands();

bot.on('message', async (msg) => {
  if (!msg.text) return;
  
  const chatId = msg.chat.id;
  const text = msg.text;

  if (text.startsWith('/')) {
    const command = text.split(' ')[0];
    const user = await prisma.user.findUnique({ where: { telegramChatId: String(chatId) } });

    switch (command) {
      case '/start':
        const welcomeText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /connect, –∞ –∑–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É.";
        bot.sendMessage(chatId, welcomeText);
        break;

      case '/connect':
        if (user) {
          bot.sendMessage(chatId, "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–≤—è–∑–∞–Ω!");
        } else {
          const frontendUrl = process.env.FRONTEND_LINKING_URL || 'https://living-diary-bot.vercel.app';
          const linkText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≤–∞—à–∏–º –¥–Ω–µ–≤–Ω–∏–∫–æ–º.";
          const options = {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîó –í–æ–π—Ç–∏ –∏ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', web_app: { url: `${frontendUrl}/?chatId=${chatId}` } }]
              ]
            }
          };
          bot.sendMessage(chatId, linkText, options);
        }
        break;
      
      case '/notes':
      case '/delete':
        if (user) {
          bot.sendMessage(chatId, "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' –≤–Ω–∏–∑—É üëá");
        } else {
          bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect.");
        }
        break;
        
      default:
        bot.sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
        break;
    }
  } else {
    handleSaveNote(chatId, text);
  }
});

async function getFirebaseUid(chatId) {
  const user = await prisma.user.findUnique({
    where: { telegramChatId: String(chatId) }
  });

  if (!user) {
    bot.sendMessage(chatId, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /connect.");
    return null;
  }
  return user.firebaseUid;
}

async function handleSaveNote(chatId, text) {
  const firebaseUid = await getFirebaseUid(chatId);
  if (!firebaseUid) return;

  const title = text.length > 30 ? text.substring(0, 30) + '...' : text;
  const content = text;

  try {
    const url = `${fastApiBaseUrl}/notes/bot/`;
    await axios.post(
      url,
      {
        title: title,
        content: content,
        userId: firebaseUid
      },
      {
        headers: {
          'X-Internal-Secret': internalSecretKey
        }
      }
    );
    bot.sendMessage(chatId, `‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ FastAPI:', error.response ? error.response.data : error.message);
    bot.sendMessage(chatId, `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
  }
}

  
async function handleGetNotes(chatId) {
    const firebaseUid = await getFirebaseUid(chatId);
    if (!firebaseUid) return;

    try {
        const response = await axios.get(`${fastApiBaseUrl}/notes/bot/`, {
            params: { userId: firebaseUid },
            headers: { 'X-Internal-Secret': internalSecretKey }
        });
        const notes = response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ FastAPI –¥–ª—è /notes:', error.response ? error.response.data : error.message);
    }
}

async function handleDeleteNote(chatId) {
    const firebaseUid = await getFirebaseUid(chatId);
    if (!firebaseUid) return;

    try {
        const response = await axios.get(`${fastApiBaseUrl}/notes/bot/`, {
            params: { userId: firebaseUid, limit: 5 },
            headers: { 'X-Internal-Secret': internalSecretKey }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', error.response ? error.response.data : error.message);
    }
}

const app = express();
app.use(cors());
app.use(express.json());

const checkAuth = async (req, res, next) => {
  const authHeader = req.headers.authorization;
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –¢–æ–∫–µ–Ω –Ω–µ  –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
  }
  const idToken = authHeader.split('Bearer ')[1];
  try {
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    req.user = decodedToken;
    next();
  } catch (error) {
    return res.status(403).send('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.');
  }
};

app.post('/api/link-account', checkAuth, async (req, res) => {
  try {
    const firebaseUid = req.user.uid;
    const { chatId } = req.body;
    if (!chatId) return res.status(400).json({ error: 'chatId –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.' });

    await prisma.user.upsert({
      where: { firebaseUid: firebaseUid },
      update: { telegramChatId: String(chatId) },
      create: { firebaseUid: firebaseUid, telegramChatId: String(chatId) }
    });

    bot.sendMessage(chatId, 'üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é".');
    
    res.status(200).json({ message: '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!' });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:", error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.listen(port, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
});